#check_dependancy.cmake

if(USE_PYTHON3)
	set(PYTHON_MIN_VERSION 3.4)
  set(PythonInterp_FIND_VERSION "${PYTHON_MIN_VERSION}")
  set(PythonLibs_FIND_VERSION "${PYTHON_MIN_VERSION}")
  find_package(PythonInterp REQUIRED)
  find_package(PythonLibs REQUIRED)
  find_package(PythonLibsNew REQUIRED)
else (USE_PYTHON3)
	set(PYTHON_MIN_VERSION 2.7)
  set(PythonInterp_FIND_VERSION "${PYTHON_MIN_VERSION}")
  set(PythonLibs_FIND_VERSION "${PYTHON_MIN_VERSION}")
  find_package(PythonInterp REQUIRED)
  find_package(PythonLibsNew REQUIRED)
endif(USE_PYTHON3)

IF(PYTHONLIBS_FOUND)
	INCLUDE_DIRECTORIES("${PYTHON_INCLUDE_DIRS}")
  find_package(NumPy REQUIRED)
  INCLUDE_DIRECTORIES(${NUMPY_INCLUDE_DIRS})
ELSE()
	MESSAGE(FATAL_ERROR "Unable to find PythonLibs.")
ENDIF()

# To statically ling boost with pyIbex on Windows
#if(WIN32)
  SET(Boost_USE_STATIC_LIBS     ON)
  add_definitions(-DBOOST_PYTHON_STATIC_LIB)
#else()  
#  SET(Boost_USE_STATIC_LIBS     OFF)
#endif()

FIND_PACKAGE(Boost COMPONENTS python)
IF(Boost_FOUND)
  INCLUDE_DIRECTORIES("${Boost_INCLUDE_DIRS}")
  SET(Boost_USE_MULTITHREADED    ON)
  SET(Boost_USE_STATIC_RUNTIME     ON)
  FIND_PACKAGE(Boost  ${BOOST_VERSION} COMPONENTS python) 
  SET(LIBS ${LIBS} ${Boost_LIBRARIES})
  #if(BUILD_STATIC)
  #	add_definitions(-DBOOST_PYTHON_STATIC_LIB)
  #endif(BUILD_STATIC)

ELSEIF(NOT Boost_FOUND)
  MESSAGE(FATAL_ERROR "Unable to find Boost.")
ENDIF()

FIND_PACKAGE(IbexLib)
if(IBEX_FOUND)
  INCLUDE_DIRECTORIES(${IBEX_INCLUDE_DIRS})
  SET(LIBS ${LIBS} ${IBEX_LIBRARIES})
else()
  MESSAGE(FATAL_ERROR "Unable to find IbexLib. Need to set IBEX_ROOT ${IBEX_ROOT}")
endif()
